window.addEventListener("keydown", function(e) {
    // space and arrow keys
    if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
        e.preventDefault();
    }
}, false);
class Handler{
    constructor(dodger) {
        document.addEventListener("keydown", event=> {
            switch (event.keyCode) {
                case 38:
                    rotationfactor++
                    break;
                case 40:
                    rotationfactor--
                    break;
                case 37:
                    tiltfactor--
                    break
                case 39:
                    tiltfactor++
                    break
                case 32:
                    dead=true
                    break
                case 97:
                    rotation4D.xw++
                    break
                case 98:
                    rotation4D.yw++
                    break
                case 99:
                    rotation4D.zw++
                    break
                case 100:
                    rotation4D.zx++
                    break
                case 101:
                    rotation4D.zy++
                    break
                case 102:
                    rotation4D.xy++
                    break
                case 87:
                    sliceoffset+=2
                    break
                case 83:
                    sliceoffset--
                    break
                case 190:
                    scale=scale*1.02
                    break
                case 188:
                    scale=scale*0.98
                    break

            }
        });
    }
}
const GAME_SIZE=600
const G=GAME_SIZE/2
const epicenter={x:G,y:G}
const epicenter3D={x:G,y:G,z:G}
let kill=false
let dead=false
const permutations = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3]]
let intensity=10
let perspective=intensity*100
let rotation4D={
    xw:0,
    yw:0,
    zw:0,
    zx:0,
    zy:0,
    xy:0
}
let scale=1
let sliceoffset=1
let rotationfactor=-6
let tiltfactor=-180
let spinfactor=90
function array2coord(array){
    let coord={}
    for(var i=0;i<array.length;i++){
        key=loopletters(33+i)
        Object.assign(coord,{temp:array[i]*2})
        renameKey(coord,'temp',key)
    }
    return coord
}
function renameKey(obj, old_key, new_key) {   
    if (old_key !== new_key) {                  
        Object.defineProperty(obj, new_key,Object.getOwnPropertyDescriptor(obj, old_key));
        delete obj[old_key];
    }
}
function loopletters(num){
    let alpha="0123456789abcdefghijklmnopqrstuvwxyzw"
    nstr=alpha[num%alpha.length]
    return nstr
}
function rotate3D(point,rx,ry,rz){
    let xpoint={
        x:point.x,
        y:rotate_point({x:point.y,y:point.z},rx).x,
        z:rotate_point({x:point.y,y:point.z},rx).y
    }
    let ypoint={
        x:rotate_point({x:xpoint.x,y:xpoint.z},ry).x,
        y:xpoint.y,
        z:rotate_point({x:xpoint.x,y:xpoint.z},ry).y
    }
    let zpoint={
        x:rotate_point({x:ypoint.x,y:ypoint.y},rz).x,
        y:rotate_point({x:ypoint.x,y:ypoint.y},rz).y,
        z:ypoint.z
    }
    return zpoint
}
function rotate_point(point,ang){
    angle=ang*(Math.PI/180)
    let Matrix=[
        [Math.cos(angle),-Math.sin(angle)],
        [Math.sin(angle),Math.cos(angle)]
    ]
    let npoint={
        x:point.x*Matrix[0][0]+point.y*Matrix[0][1],
        y:point.x*Matrix[1][0]+point.y*Matrix[1][1]
    }
    return npoint
}
function rotate4D(realpoint,r,midpoint){
    let point=pndiff4D(realpoint,midpoint)
    let xwpoint={
        x:point.x,
        y:rotate_point({x:point.y,y:point.z},r.xw).x,
        z:rotate_point({x:point.y,y:point.z},r.xw).y,
        w:point.w
    }
    let ywpoint={
        x:rotate_point({x:xwpoint.x,y:xwpoint.z},r.yw).x,
        y:xwpoint.y,
        z:rotate_point({x:xwpoint.x,y:xwpoint.z},r.yw).y,
        w:xwpoint.w
    }
    let zwpoint={
        x:rotate_point({x:ywpoint.x,y:ywpoint.y},r.zw).x,
        y:rotate_point({x:ywpoint.x,y:ywpoint.y},r.zw).y,
        z:ywpoint.z,
        w:ywpoint.w
    }
    let zxpoint={
        x:zwpoint.x,
        y:rotate_point({x:zwpoint.y,y:zwpoint.w},r.zx).x,
        z:zwpoint.z,
        w:rotate_point({x:zwpoint.y,y:zwpoint.w},r.zx).y
    }
    let zypoint={
        x:rotate_point({x:zxpoint.x,y:zxpoint.w},r.zy).x,
        y:zxpoint.y,
        z:zxpoint.z,
        w:rotate_point({x:zxpoint.x,y:zxpoint.w},r.zy).y
    }
    let xypoint={
        x:zypoint.x,
        y:zypoint.y,
        z:rotate_point({x:zypoint.z,y:zypoint.w},r.xy).x,
        w:rotate_point({x:zypoint.z,y:zypoint.w},r.xy).y
    }
    return {x:xypoint.x*scale+midpoint.x,y:xypoint.y*scale+midpoint.y,z:xypoint.z*scale+midpoint.z,w:xypoint.w*scale+midpoint.w}
}
function iso_map(pos){
    let isopos
    let relpos=pndiff3D(pos,epicenter3D)
    isopos=add_perspective(rotate3D(relpos,tiltfactor,rotationfactor,spinfactor),perspective,intensity)
    let final={
        x:isopos.x+epicenter.x,
        y:isopos.y+epicenter.y
    }
    return final
}
function rotate3D(point,rx,ry,rz){
    let xpoint={
        x:point.x,
        y:rotate_point({x:point.y,y:point.z},rx).x,
        z:rotate_point({x:point.y,y:point.z},rx).y
    }
    let ypoint={
        x:rotate_point({x:xpoint.x,y:xpoint.z},ry).x,
        y:xpoint.y,
        z:rotate_point({x:xpoint.x,y:xpoint.z},ry).y
    }
    let zpoint={
        x:rotate_point({x:ypoint.x,y:ypoint.y},rz).x,
        y:rotate_point({x:ypoint.x,y:ypoint.y},rz).y,
        z:ypoint.z
    }
    return zpoint
}
function add_perspective(point,perspective,intensity){
    let z = intensity*G-point.z
    let Matrix=[
        [1,0,0,0],
        [0,1,0,0],
        [0,0,1,0],
        [0,0,1/perspective,0]
    ]
    let hpoint={
        x:point.x*Matrix[0][0]+point.y*Matrix[0][1]+z*Matrix[0][2]+0*Matrix[0][3],
        y:point.x*Matrix[1][0]+point.y*Matrix[1][1]+z*Matrix[1][2]+0*Matrix[1][3],
        z:point.x*Matrix[2][0]+point.y*Matrix[2][1]+z*Matrix[2][2]+0*Matrix[2][3],
        w:point.x*Matrix[3][0]+point.y*Matrix[3][1]+z*Matrix[3][2]+0*Matrix[3][3],
    }
    let npoint={
        x:hpoint.x,
        y:hpoint.y,
        z:hpoint.z
    }
    return npoint
}
function Bdraw(points){
    var i
    for(i=0;i<points.length-1;i++){
        JTD(points[i],points[i+1])
    }
    JTD(points[points.length-1],points[0])
}
function Bdraw3D(points,faces){
    var isopoints=[]
    var fpoints=[]
    for(var i=0;i<points.length;i++){
        isopoints.push(iso_map(points[i]))
    }
    for(i=0;i<faces.length;i++){
        fpoints=[]
        for(var j=0;j<faces[i].length;j++){
            fpoints.push(isopoints[faces[i][j]])
        }
        Bdraw(fpoints)
        
    }
}
function pndiff(p1,p2){
    dist={x:p1.x-p2.x,y:p1.y-p2.y}
    return dist
}
function pndiff3D(p1,p2){
    dist={x:p1.x-p2.x,y:p1.y-p2.y,z:p1.z-p2.z}
    return dist
}
function pndiff4D(p1,p2){
    dist={x:p1.x-p2.x,y:p1.y-p2.y,z:p1.z-p2.z,w:p1.w-p2.w}
    return dist
}
function JTD(p1,p2){
    if(pndiff(p1,p2).x>=0){
        angle=pnanglefinder(p1,p2)+180
    }
    else{
        angle=pnanglefinder(p1,p2)
    }
    
    dist=Math.sqrt(Math.pow(diff(p1,p2).x,2)+Math.pow(diff(p1,p2).y,2))
    drawline(p1,angle,dist)
}
function scale_point(point,scale){
    let Matrix=[
        [scale,0],
        [0,scale],
    ]
    let npoint={
        x:point.x*Matrix[0][0]+point.y*Matrix[0][1],
        y:point.x*Matrix[1][0]+point.y*Matrix[1][1]
    }
    return npoint
}
function angularmov(ang,speed){
    rang=ang*(Math.PI/180)
    xymot={
        x:0,
        y:0
    }
    xymot.y=speed*Math.sin(rang)
    xymot.x=speed*Math.cos(rang)
    return xymot
}
function pnanglefinder(p1,p2){
    dist=pndiff(p1,p2)
    rang=Math.atan(dist.y/dist.x)
    ang=rang/(Math.PI/180)
    return ang
}
function diff(p1,p2){
    dist={x:0,y:0}
    if(p1.x>p2.x){
        dist.x=p1.x-p2.x
    }
    else{
        dist.x=p2.x-p1.x
        // dist.sector+=10
    }
    if(p1.y>p2.y){
        dist.y=p1.y-p2.y
    }
    else{
        dist.y=p2.y-p1.y
        // dist.sector++
    }
    return dist

}
function drawline(origin,ang,length){
    for(i=0;i<length;i++){
        pos=angularmov(ang,i)
        ctx.fillRect(origin.x+pos.x,origin.y+pos.y,2,2)
    }
}
function overlap(nums){
    del=[]
    overlaps=[]
    for(var i=0;i<nums.length-1;i++){
        for(var j=i+1;j<nums.length;j++){
            if(nums[i]==nums[j]){
                overlaps.push([i,j])
            }
        }
    }
    if(overlaps.length==3){
        return 'all'
    }
    for(i=0;i<overlaps.length;i++){
        return (overlaps[i][Math.floor(Math.random()*2)])
    }
}
function slice(globalobj,faces,slice){
    let obj=globalobj
    for(j=0;j<obj.length;j++){
        obj[j].w-=slice
        if(obj[j].w==0){
            obj[j].w+=0.0001
        }
    }
    let fpoints=[]
    for(var i=0;i<faces.length;i++){
        fpoints.push([])
        for(var j=0;j<faces[i].length;j++){
            fpoints[i].push(obj[faces[i][j]])
        }
    }
    let slicepoints=[]
    for(i=0;i<fpoints.length;i++){
        let lines=[]
        for(j=0;j<permutations.length;j++){
            lines.push([fpoints[i][permutations[j][0]],fpoints[i][permutations[j][1]]])
        }
        let ilines=[]
        for(j=0;j<lines.length;j++){
            if((lines[j][0].w<0||lines[j][1].w<0) && !(lines[j][0].w<0 && lines[j][1].w<0)){
                ilines.push(lines[j])
            }
        }
        if((ilines.length<3||ilines>4) && ilines.length!=0){
            console.log('iline error:')
        }
        slicepoints.push([])
        for(j=0;j<ilines.length;j++){
            slicepoints[i].push({
                x:(ilines[j][0].x-(ilines[j][0].w*((ilines[j][0].x-ilines[j][1].x)/(ilines[j][0].w-ilines[j][1].w)))),
                y:(ilines[j][0].y-(ilines[j][0].w*((ilines[j][0].y-ilines[j][1].y)/(ilines[j][0].w-ilines[j][1].w)))),
                z:(ilines[j][0].z-(ilines[j][0].w*((ilines[j][0].z-ilines[j][1].z)/(ilines[j][0].w-ilines[j][1].w)))),
            })
        }
    }
    return slicepoints
}
function sliceDraw(points,faces,slicefactor){
    let rotpoints=[]
    for(var i=0;i<points.length;i++){
        rotpoints.push(rotate4D(points[i],rotation4D,{x:G,y:G,z:G,w:G}))
    }
    let slicepoints=slice(rotpoints,faces,slicefactor)
    for(var i=0;i<slicepoints.length;i++){
        let propoints=[]
        for(j=0;j<slicepoints[i].length;j++){
            propoints.push(iso_map(slicepoints[i][j]))
        }
        if(propoints.length>0){
            Bdraw(propoints)
        }
        
    }
}
let canvas = document.getElementById("gamescreen")
let ctx = canvas.getContext('2d')



new Handler();
let points = [[50.0, -50.0, 50.0, 0], [-50.0, -50.0, 50.0, 0], [-50.0, 50.0, 50.0, 0], [-57.20614194869995, -41.56269431114197, 50.0, 50], [-41.56269431114197, 57.20614194869995, 50.0, 50], [41.56269431114197, -57.20614194869995, 50.0, 50], [50.0, 50.0, 50.0, 0], [57.20614194869995, 41.56269431114197, 50.0, 50], [50.0, 50.0, -50.0, 0], [57.20614194869995, 41.56269431114197, -50.0, 50], [-50.0, 50.0, -50.0, 0], [-41.56269431114197, 57.20614194869995, -50.0, 50], [-50.0, -50.0, -50.0, 0], [-57.20614194869995, -41.56269431114197, -50.0, 50], [50.0, -50.0, -50.0, 0], [41.56269431114197, -57.20614194869995, -50.0, 50], [-63.00367712974548, -32.101970911026, 50.0, 100], [-32.101970911026, 63.00367712974548, 50.0, 100], [32.101970911026, -63.00367712974548, 50.0, 100], [63.00367712974548, 32.101970911026, 50.0, 100], [63.00367712974548, 32.101970911026, -50.0, 100], [-32.101970911026, 63.00367712974548, -50.0, 100], [-63.00367712974548, -32.101970911026, -50.0, 100], [32.101970911026, -63.00367712974548, -50.0, 100], [-67.24985241889954, -21.850799024105072, 50.0, 150], [-21.850799024105072, 67.24985241889954, 50.0, 150], [21.850799024105072, -67.24985241889954, 50.0, 150], [67.24985241889954, 21.850799024105072, 50.0, 150], [67.24985241889954, 21.850799024105072, -50.0, 150], [-21.850799024105072, 67.24985241889954, -50.0, 150], [-67.24985241889954, -21.850799024105072, -50.0, 150], [21.850799024105072, -67.24985241889954, -50.0, 150], [-69.84010934829712, -11.06158196926117, 50.0, 200], [-11.06158196926117, 69.84010934829712, 50.0, 200], [11.06158196926117, -69.84010934829712, 50.0, 200], [69.84010934829712, 11.06158196926117, 50.0, 200], [69.84010934829712, 11.06158196926117, -50.0, 200], [-11.06158196926117, 69.84010934829712, -50.0, 200], [-69.84010934829712, -11.06158196926117, -50.0, 200], [11.06158196926117, -69.84010934829712, -50.0, 200], [-70.71067690849304, 5.9604644775390625e-06, 50.0, 250], [5.9604644775390625e-06, 70.71067690849304, 50.0, 250], [-5.9604644775390625e-06, -70.71067690849304, 50.0, 250], [70.71067690849304, -5.9604644775390625e-06, 50.0, 250], [70.71067690849304, -5.9604644775390625e-06, -50.0, 250], [5.9604644775390625e-06, 70.71067690849304, -50.0, 250], [-70.71067690849304, 5.9604644775390625e-06, -50.0, 250], [-5.9604644775390625e-06, -70.71067690849304, -50.0, 250], [-69.84010934829712, 11.061593890190125, 50.0, 300], [11.061593890190125, 69.84010934829712, 50.0, 300], [-11.061593890190125, -69.84010934829712, 50.0, 300], [69.84010934829712, -11.061593890190125, 50.0, 300], [69.84010934829712, -11.061593890190125, -50.0, 300], [11.061593890190125, 69.84010934829712, -50.0, 300], [-69.84010934829712, 11.061593890190125, -50.0, 300], [-11.061593890190125, -69.84010934829712, -50.0, 300], [-67.24985241889954, 21.85080796480179, 50.0, 350], [21.85080796480179, 67.24985241889954, 50.0, 350], [-21.85080796480179, -67.24985241889954, 50.0, 350], [67.24985241889954, -21.85080796480179, 50.0, 350], [67.24985241889954, -21.85080796480179, -50.0, 350], [21.85080796480179, 67.24985241889954, -50.0, 350], [-67.24985241889954, 21.85080796480179, -50.0, 350], [-21.85080796480179, -67.24985241889954, -50.0, 350], [-63.003671169281006, 32.101982831954956, 50.0, 400], [32.101982831954956, 63.003671169281006, 50.0, 400], [-32.101982831954956, -63.003671169281006, 50.0, 400], [63.003671169281006, -32.101982831954956, 50.0, 400], [63.003671169281006, -32.101982831954956, -50.0, 400], [32.101982831954956, 63.003671169281006, -50.0, 400], [-63.003671169281006, 32.101982831954956, -50.0, 400], [-32.101982831954956, -63.003671169281006, -50.0, 400], [-57.206130027770996, 41.56270623207092, 50.0, 450], [41.56270623207092, 57.206130027770996, 50.0, 450], [-41.56270623207092, -57.206130027770996, 50.0, 450], [57.206130027770996, -41.56270623207092, 50.0, 450], [57.206130027770996, -41.56270623207092, -50.0, 450], [41.56270623207092, 57.206130027770996, -50.0, 450], [-57.206130027770996, 41.56270623207092, -50.0, 450], [-41.56270623207092, -57.206130027770996, -50.0, 450], [-49.999991059303284, 50.00000596046448, 50.0, 500], [50.00000596046448, 49.999991059303284, 50.0, 500], [-50.00000596046448, -49.999991059303284, 50.0, 500], [49.999991059303284, -50.00000596046448, 50.0, 500], [49.999991059303284, -50.00000596046448, -50.0, 500], [50.00000596046448, 49.999991059303284, -50.0, 500], [-49.999991059303284, 50.00000596046448, -50.0, 500], [-50.00000596046448, -49.999991059303284, -50.0, 500], [-41.56268835067749, 57.20614194869995, 50.0, 550], [57.20614194869995, 41.56268835067749, 50.0, 550], [-57.20614194869995, -41.56268835067749, 50.0, 550], [41.56268835067749, -57.20614194869995, 50.0, 550], [41.56268835067749, -57.20614194869995, -50.0, 550], [57.20614194869995, 41.56268835067749, -50.0, 550], [-41.56268835067749, 57.20614194869995, -50.0, 550], [-57.20614194869995, -41.56268835067749, -50.0, 550], [-32.10196495056152, 63.00368309020996, 50.0, 600], [63.00368309020996, 32.10196495056152, 50.0, 600], [-63.00368309020996, -32.10196495056152, 50.0, 600], [32.10196495056152, -63.00368309020996, 50.0, 600], [32.10196495056152, -63.00368309020996, -50.0, 600], [63.00368309020996, 32.10196495056152, -50.0, 600], [-32.10196495056152, 63.00368309020996, -50.0, 600], [-63.00368309020996, -32.10196495056152, -50.0, 600], [-21.85077667236328, 67.24985837936401, 50.0, 650], [67.24985837936401, 21.85077667236328, 50.0, 650], [-67.24985837936401, -21.85077667236328, 50.0, 650], [21.85077667236328, -67.24985837936401, 50.0, 650], [21.85077667236328, -67.24985837936401, -50.0, 650], [67.24985837936401, 21.85077667236328, -50.0, 650], [-21.85077667236328, 67.24985837936401, -50.0, 650], [-67.24985837936401, -21.85077667236328, -50.0, 650], [-11.061573028564453, 69.8401153087616, 50.0, 700], [69.8401153087616, 11.061573028564453, 50.0, 700], [-69.8401153087616, -11.061573028564453, 50.0, 700], [11.061573028564453, -69.8401153087616, 50.0, 700], [11.061573028564453, -69.8401153087616, -50.0, 700], [69.8401153087616, 11.061573028564453, -50.0, 700], [-11.061573028564453, 69.8401153087616, -50.0, 700], [-69.8401153087616, -11.061573028564453, -50.0, 700], [1.7881393432617188e-05, 70.71067690849304, 50.0, 750], [70.71067690849304, -1.7881393432617188e-05, 50.0, 750], [-70.71067690849304, 1.7881393432617188e-05, 50.0, 750], [-1.7881393432617188e-05, -70.71067690849304, 50.0, 750], [-1.7881393432617188e-05, -70.71067690849304, -50.0, 750], [70.71067690849304, -1.7881393432617188e-05, -50.0, 750], [1.7881393432617188e-05, 70.71067690849304, -50.0, 750], [-70.71067690849304, 1.7881393432617188e-05, -50.0, 750], [11.061608791351318, 69.84010934829712, 50.0, 800], [69.84010934829712, -11.061608791351318, 50.0, 800], [-69.84010934829712, 11.061608791351318, 50.0, 800], [-11.061608791351318, -69.84010934829712, 50.0, 800], [-11.061608791351318, -69.84010934829712, -50.0, 800], [69.84010934829712, -11.061608791351318, -50.0, 800], [11.061608791351318, 69.84010934829712, -50.0, 800], [-69.84010934829712, 11.061608791351318, -50.0, 800], [21.85082733631134, 67.24984645843506, 50.0, 850], [67.24984645843506, -21.85082733631134, 50.0, 850], [-67.24984645843506, 21.85082733631134, 50.0, 850], [-21.85082733631134, -67.24984645843506, 50.0, 850], [-21.85082733631134, -67.24984645843506, -50.0, 850], [67.24984645843506, -21.85082733631134, -50.0, 850], [21.85082733631134, 67.24984645843506, -50.0, 850], [-67.24984645843506, 21.85082733631134, -50.0, 850], [32.10200369358063, 63.00365924835205, 50.0, 900], [63.00365924835205, -32.10200369358063, 50.0, 900], [-63.00365924835205, 32.10200369358063, 50.0, 900], [-32.10200369358063, -63.00365924835205, 50.0, 900], [-32.10200369358063, -63.00365924835205, -50.0, 900], [63.00365924835205, -32.10200369358063, -50.0, 900], [32.10200369358063, 63.00365924835205, -50.0, 900], [-63.00365924835205, 32.10200369358063, -50.0, 900], [41.56270623207092, 57.206130027770996, 50.0, 950], [57.206130027770996, -41.56270623207092, 50.0, 950], [-57.206130027770996, 41.56270623207092, 50.0, 950], [-41.56270623207092, -57.206130027770996, 50.0, 950], [-41.56270623207092, -57.206130027770996, -50.0, 950], [57.206130027770996, -41.56270623207092, -50.0, 950], [41.56270623207092, 57.206130027770996, -50.0, 950], [-57.206130027770996, 41.56270623207092, -50.0, 950]]
let borderpoints=[]
for(i=0;i<points.length;i++){
    borderpoints.push(array2coord(points[i]))
}
console.log(borderpoints)
let faces = [[0, 1, 2, 3], [0, 2, 3, 4], [5, 3, 4, 0], [0, 2, 6, 4], [0, 6, 4, 7], [5, 4, 7, 0], [8, 6, 2, 7], [8, 2, 7, 4], [9, 7, 4, 8], [8, 2, 10, 4], [8, 10, 4, 11], [9, 4, 11, 8], [10, 2, 1, 4], [10, 1, 4, 3], [11, 4, 3, 10], [10, 1, 12, 3], [10, 12, 3, 13], [11, 3, 13, 10], [12, 14, 8, 15], [12, 8, 15, 9], [13, 15, 9, 12], [12, 8, 10, 9], [12, 10, 9, 11], [13, 9, 11, 12], [14, 0, 6, 5], [14, 6, 5, 7], [15, 5, 7, 14], [14, 6, 8, 7], [14, 8, 7, 9], [15, 7, 9, 14], [12, 1, 0, 3], [12, 0, 3, 5], [13, 3, 5, 12], [12, 0, 14, 5], [12, 14, 5, 15], [13, 5, 15, 12], [5, 3, 4, 16], [5, 4, 16, 17], [18, 16, 17, 5], [5, 4, 7, 17], [5, 7, 17, 19], [18, 17, 19, 5], [9, 7, 4, 19], [9, 4, 19, 17], [20, 19, 17, 9], [9, 4, 11, 17], [9, 11, 17, 21], [20, 17, 21, 9], [11, 4, 3, 17], [11, 3, 17, 16], [21, 17, 16, 11], [11, 3, 13, 16], [11, 13, 16, 22], [21, 16, 22, 11], [13, 15, 9, 23], [13, 9, 23, 20], [22, 23, 20, 13], [13, 9, 11, 20], [13, 11, 20, 21], [22, 20, 21, 13], [15, 5, 7, 18], [15, 7, 18, 19], [23, 18, 19, 15], [15, 7, 9, 19], [15, 9, 19, 20], [23, 19, 20, 15], [13, 3, 5, 16], [13, 5, 16, 18], [22, 16, 18, 13], [13, 5, 15, 18], [13, 15, 18, 23], [22, 18, 23, 13], [18, 16, 17, 24], [18, 17, 24, 25], [26, 24, 25, 18], [18, 17, 19, 25], [18, 19, 25, 27], [26, 25, 27, 18], [20, 19, 17, 27], [20, 17, 27, 25], [28, 27, 25, 20], [20, 17, 21, 25], [20, 21, 25, 29], [28, 25, 29, 20], [21, 17, 16, 25], [21, 16, 25, 24], [29, 25, 24, 21], [21, 16, 22, 24], [21, 22, 24, 30], [29, 24, 30, 21], [22, 23, 20, 31], [22, 20, 31, 28], [30, 31, 28, 22], [22, 20, 21, 28], [22, 21, 28, 29], [30, 28, 29, 22], [23, 18, 19, 26], [23, 19, 26, 27], [31, 26, 27, 23], [23, 19, 20, 27], [23, 20, 27, 28], [31, 27, 28, 23], [22, 16, 18, 24], [22, 18, 24, 26], [30, 24, 26, 22], [22, 18, 23, 26], [22, 23, 26, 31], [30, 26, 31, 22], [26, 24, 25, 32], [26, 25, 32, 33], [34, 32, 33, 26], [26, 25, 27, 33], [26, 27, 33, 35], [34, 33, 35, 26], [28, 27, 25, 35], [28, 25, 35, 33], [36, 35, 33, 28], [28, 25, 29, 33], [28, 29, 33, 37], [36, 33, 37, 28], [29, 25, 24, 33], [29, 24, 33, 32], [37, 33, 32, 29], [29, 24, 30, 32], [29, 30, 32, 38], [37, 32, 38, 29], [30, 31, 28, 39], [30, 28, 39, 36], [38, 39, 36, 30], [30, 28, 29, 36], [30, 29, 36, 37], [38, 36, 37, 30], [31, 26, 27, 34], [31, 27, 34, 35], [39, 34, 35, 31], [31, 27, 28, 35], [31, 28, 35, 36], [39, 35, 36, 31], [30, 24, 26, 32], [30, 26, 32, 34], [38, 32, 34, 30], [30, 26, 31, 34], [30, 31, 34, 39], [38, 34, 39, 30], [34, 32, 33, 40], [34, 33, 40, 41], [42, 40, 41, 34], [34, 33, 35, 41], [34, 35, 41, 43], [42, 41, 43, 34], [36, 35, 33, 43], [36, 33, 43, 41], [44, 43, 41, 36], [36, 33, 37, 41], [36, 37, 41, 45], [44, 41, 45, 36], [37, 33, 32, 41], [37, 32, 41, 40], [45, 41, 40, 37], [37, 32, 38, 40], [37, 38, 40, 46], [45, 40, 46, 37], [38, 39, 36, 47], [38, 36, 47, 44], [46, 47, 44, 38], [38, 36, 37, 44], [38, 37, 44, 45], [46, 44, 45, 38], [39, 34, 35, 42], [39, 35, 42, 43], [47, 42, 43, 39], [39, 35, 36, 43], [39, 36, 43, 44], [47, 43, 44, 39], [38, 32, 34, 40], [38, 34, 40, 42], [46, 40, 42, 38], [38, 34, 39, 42], [38, 39, 42, 47], [46, 42, 47, 38], [42, 40, 41, 48], [42, 41, 48, 49], [50, 48, 49, 42], [42, 41, 43, 49], [42, 43, 49, 51], [50, 49, 51, 42], [44, 43, 41, 51], [44, 41, 51, 49], [52, 51, 49, 44], [44, 41, 45, 49], [44, 45, 49, 53], [52, 49, 53, 44], [45, 41, 40, 49], [45, 40, 49, 48], [53, 49, 48, 45], [45, 40, 46, 48], [45, 46, 48, 54], [53, 48, 54, 45], [46, 47, 44, 55], [46, 44, 55, 52], [54, 55, 52, 46], [46, 44, 45, 52], [46, 45, 52, 53], [54, 52, 53, 46], [47, 42, 43, 50], [47, 43, 50, 51], [55, 50, 51, 47], [47, 43, 44, 51], [47, 44, 51, 52], [55, 51, 52, 47], [46, 40, 42, 48], [46, 42, 48, 50], [54, 48, 50, 46], [46, 42, 47, 50], [46, 47, 50, 55], [54, 50, 55, 46], [50, 48, 49, 56], [50, 49, 56, 57], [58, 56, 57, 50], [50, 49, 51, 57], [50, 51, 57, 59], [58, 57, 59, 50], [52, 51, 49, 59], [52, 49, 59, 57], [60, 59, 57, 52], [52, 49, 53, 57], [52, 53, 57, 61], [60, 57, 61, 52], [53, 49, 48, 57], [53, 48, 57, 56], [61, 57, 56, 53], [53, 48, 54, 56], [53, 54, 56, 62], [61, 56, 62, 53], [54, 55, 52, 63], [54, 52, 63, 60], [62, 63, 60, 54], [54, 52, 53, 60], [54, 53, 60, 61], [62, 60, 61, 54], [55, 50, 51, 58], [55, 51, 58, 59], [63, 58, 59, 55], [55, 51, 52, 59], [55, 52, 59, 60], [63, 59, 60, 55], [54, 48, 50, 56], [54, 50, 56, 58], [62, 56, 58, 54], [54, 50, 55, 58], [54, 55, 58, 63], [62, 58, 63, 54], [58, 56, 57, 64], [58, 57, 64, 65], [66, 64, 65, 58], [58, 57, 59, 65], [58, 59, 65, 67], [66, 65, 67, 58], [60, 59, 57, 67], [60, 57, 67, 65], [68, 67, 65, 60], [60, 57, 61, 65], [60, 61, 65, 69], [68, 65, 69, 60], [61, 57, 56, 65], [61, 56, 65, 64], [69, 65, 64, 61], [61, 56, 62, 64], [61, 62, 64, 70], [69, 64, 70, 61], [62, 63, 60, 71], [62, 60, 71, 68], [70, 71, 68, 62], [62, 60, 61, 68], [62, 61, 68, 69], [70, 68, 69, 62], [63, 58, 59, 66], [63, 59, 66, 67], [71, 66, 67, 63], [63, 59, 60, 67], [63, 60, 67, 68], [71, 67, 68, 63], [62, 56, 58, 64], [62, 58, 64, 66], [70, 64, 66, 62], [62, 58, 63, 66], [62, 63, 66, 71], [70, 66, 71, 62], [66, 64, 65, 72], [66, 65, 72, 73], [74, 72, 73, 66], [66, 65, 67, 73], [66, 67, 73, 75], [74, 73, 75, 66], [68, 67, 65, 75], [68, 65, 75, 73], [76, 75, 73, 68], [68, 65, 69, 73], [68, 69, 73, 77], [76, 73, 77, 68], [69, 65, 64, 73], [69, 64, 73, 72], [77, 73, 72, 69], [69, 64, 70, 72], [69, 70, 72, 78], [77, 72, 78, 69], [70, 71, 68, 79], [70, 68, 79, 76], [78, 79, 76, 70], [70, 68, 69, 76], [70, 69, 76, 77], [78, 76, 77, 70], [71, 66, 67, 74], [71, 67, 74, 75], [79, 74, 75, 71], [71, 67, 68, 75], [71, 68, 75, 76], [79, 75, 76, 71], [70, 64, 66, 72], [70, 66, 72, 74], [78, 72, 74, 70], [70, 66, 71, 74], [70, 71, 74, 79], [78, 74, 79, 70], [74, 72, 73, 80], [74, 73, 80, 81], [82, 80, 81, 74], [74, 73, 75, 81], [74, 75, 81, 83], [82, 81, 83, 74], [76, 75, 73, 83], [76, 73, 83, 81], [84, 83, 81, 76], [76, 73, 77, 81], [76, 77, 81, 85], [84, 81, 85, 76], [77, 73, 72, 81], [77, 72, 81, 80], [85, 81, 80, 77], [77, 72, 78, 80], [77, 78, 80, 86], [85, 80, 86, 77], [78, 79, 76, 87], [78, 76, 87, 84], [86, 87, 84, 78], [78, 76, 77, 84], [78, 77, 84, 85], [86, 84, 85, 78], [79, 74, 75, 82], [79, 75, 82, 83], [87, 82, 83, 79], [79, 75, 76, 83], [79, 76, 83, 84], [87, 83, 84, 79], [78, 72, 74, 80], [78, 74, 80, 82], [86, 80, 82, 78], [78, 74, 79, 82], [78, 79, 82, 87], [86, 82, 87, 78], [82, 80, 81, 88], [82, 81, 88, 89], [90, 88, 89, 82], [82, 81, 83, 89], [82, 83, 89, 91], [90, 89, 91, 82], [84, 83, 81, 91], [84, 81, 91, 89], [92, 91, 89, 84], [84, 81, 85, 89], [84, 85, 89, 93], [92, 89, 93, 84], [85, 81, 80, 89], [85, 80, 89, 88], [93, 89, 88, 85], [85, 80, 86, 88], [85, 86, 88, 94], [93, 88, 94, 85], [86, 87, 84, 95], [86, 84, 95, 92], [94, 95, 92, 86], [86, 84, 85, 92], [86, 85, 92, 93], [94, 92, 93, 86], [87, 82, 83, 90], [87, 83, 90, 91], [95, 90, 91, 87], [87, 83, 84, 91], [87, 84, 91, 92], [95, 91, 92, 87], [86, 80, 82, 88], [86, 82, 88, 90], [94, 88, 90, 86], [86, 82, 87, 90], [86, 87, 90, 95], [94, 90, 95, 86], [90, 88, 89, 96], [90, 89, 96, 97], [98, 96, 97, 90], [90, 89, 91, 97], [90, 91, 97, 99], [98, 97, 99, 90], [92, 91, 89, 99], [92, 89, 99, 97], [100, 99, 97, 92], [92, 89, 93, 97], [92, 93, 97, 101], [100, 97, 101, 92], [93, 89, 88, 97], [93, 88, 97, 96], [101, 97, 96, 93], [93, 88, 94, 96], [93, 94, 96, 102], [101, 96, 102, 93], [94, 95, 92, 103], [94, 92, 103, 100], [102, 103, 100, 94], [94, 92, 93, 100], [94, 93, 100, 101], [102, 100, 101, 94], [95, 90, 91, 98], [95, 91, 98, 99], [103, 98, 99, 95], [95, 91, 92, 99], [95, 92, 99, 100], [103, 99, 100, 95], [94, 88, 90, 96], [94, 90, 96, 98], [102, 96, 98, 94], [94, 90, 95, 98], [94, 95, 98, 103], [102, 98, 103, 94], [98, 96, 97, 104], [98, 97, 104, 105], [106, 104, 105, 98], [98, 97, 99, 105], [98, 99, 105, 107], [106, 105, 107, 98], [100, 99, 97, 107], [100, 97, 107, 105], [108, 107, 105, 100], [100, 97, 101, 105], [100, 101, 105, 109], [108, 105, 109, 100], [101, 97, 96, 105], [101, 96, 105, 104], [109, 105, 104, 101], [101, 96, 102, 104], [101, 102, 104, 110], [109, 104, 110, 101], [102, 103, 100, 111], [102, 100, 111, 108], [110, 111, 108, 102], [102, 100, 101, 108], [102, 101, 108, 109], [110, 108, 109, 102], [103, 98, 99, 106], [103, 99, 106, 107], [111, 106, 107, 103], [103, 99, 100, 107], [103, 100, 107, 108], [111, 107, 108, 103], [102, 96, 98, 104], [102, 98, 104, 106], [110, 104, 106, 102], [102, 98, 103, 106], [102, 103, 106, 111], [110, 106, 111, 102], [106, 104, 105, 112], [106, 105, 112, 113], [114, 112, 113, 106], [106, 105, 107, 113], [106, 107, 113, 115], [114, 113, 115, 106], [108, 107, 105, 115], [108, 105, 115, 113], [116, 115, 113, 108], [108, 105, 109, 113], [108, 109, 113, 117], [116, 113, 117, 108], [109, 105, 104, 113], [109, 104, 113, 112], [117, 113, 112, 109], [109, 104, 110, 112], [109, 110, 112, 118], [117, 112, 118, 109], [110, 111, 108, 119], [110, 108, 119, 116], [118, 119, 116, 110], [110, 108, 109, 116], [110, 109, 116, 117], [118, 116, 117, 110], [111, 106, 107, 114], [111, 107, 114, 115], [119, 114, 115, 111], [111, 107, 108, 115], [111, 108, 115, 116], [119, 115, 116, 111], [110, 104, 106, 112], [110, 106, 112, 114], [118, 112, 114, 110], [110, 106, 111, 114], [110, 111, 114, 119], [118, 114, 119, 110], [114, 112, 113, 120], [114, 113, 120, 121], [122, 120, 121, 114], [114, 113, 115, 121], [114, 115, 121, 123], [122, 121, 123, 114], [116, 115, 113, 123], [116, 113, 123, 121], [124, 123, 121, 116], [116, 113, 117, 121], [116, 117, 121, 125], [124, 121, 125, 116], [117, 113, 112, 121], [117, 112, 121, 120], [125, 121, 120, 117], [117, 112, 118, 120], [117, 118, 120, 126], [125, 120, 126, 117], [118, 119, 116, 127], [118, 116, 127, 124], [126, 127, 124, 118], [118, 116, 117, 124], [118, 117, 124, 125], [126, 124, 125, 118], [119, 114, 115, 122], [119, 115, 122, 123], [127, 122, 123, 119], [119, 115, 116, 123], [119, 116, 123, 124], [127, 123, 124, 119], [118, 112, 114, 120], [118, 114, 120, 122], [126, 120, 122, 118], [118, 114, 119, 122], [118, 119, 122, 127], [126, 122, 127, 118], [122, 120, 121, 128], [122, 121, 128, 129], [130, 128, 129, 122], [122, 121, 123, 129], [122, 123, 129, 131], [130, 129, 131, 122], [124, 123, 121, 131], [124, 121, 131, 129], [132, 131, 129, 124], [124, 121, 125, 129], [124, 125, 129, 133], [132, 129, 133, 124], [125, 121, 120, 129], [125, 120, 129, 128], [133, 129, 128, 125], [125, 120, 126, 128], [125, 126, 128, 134], [133, 128, 134, 125], [126, 127, 124, 135], [126, 124, 135, 132], [134, 135, 132, 126], [126, 124, 125, 132], [126, 125, 132, 133], [134, 132, 133, 126], [127, 122, 123, 130], [127, 123, 130, 131], [135, 130, 131, 127], [127, 123, 124, 131], [127, 124, 131, 132], [135, 131, 132, 127], [126, 120, 122, 128], [126, 122, 128, 130], [134, 128, 130, 126], [126, 122, 127, 130], [126, 127, 130, 135], [134, 130, 135, 126], [130, 128, 129, 136], [130, 129, 136, 137], [138, 136, 137, 130], [130, 129, 131, 137], [130, 131, 137, 139], [138, 137, 139, 130], [132, 131, 129, 139], [132, 129, 139, 137], [140, 139, 137, 132], [132, 129, 133, 137], [132, 133, 137, 141], [140, 137, 141, 132], [133, 129, 128, 137], [133, 128, 137, 136], [141, 137, 136, 133], [133, 128, 134, 136], [133, 134, 136, 142], [141, 136, 142, 133], [134, 135, 132, 143], [134, 132, 143, 140], [142, 143, 140, 134], [134, 132, 133, 140], [134, 133, 140, 141], [142, 140, 141, 134], [135, 130, 131, 138], [135, 131, 138, 139], [143, 138, 139, 135], [135, 131, 132, 139], [135, 132, 139, 140], [143, 139, 140, 135], [134, 128, 130, 136], [134, 130, 136, 138], [142, 136, 138, 134], [134, 130, 135, 138], [134, 135, 138, 143], [142, 138, 143, 134], [138, 136, 137, 144], [138, 137, 144, 145], [146, 144, 145, 138], [138, 137, 139, 145], [138, 139, 145, 147], [146, 145, 147, 138], [140, 139, 137, 147], [140, 137, 147, 145], [148, 147, 145, 140], [140, 137, 141, 145], [140, 141, 145, 149], [148, 145, 149, 140], [141, 137, 136, 145], [141, 136, 145, 144], [149, 145, 144, 141], [141, 136, 142, 144], [141, 142, 144, 150], [149, 144, 150, 141], [142, 143, 140, 151], [142, 140, 151, 148], [150, 151, 148, 142], [142, 140, 141, 148], [142, 141, 148, 149], [150, 148, 149, 142], [143, 138, 139, 146], [143, 139, 146, 147], [151, 146, 147, 143], [143, 139, 140, 147], [143, 140, 147, 148], [151, 147, 148, 143], [142, 136, 138, 144], [142, 138, 144, 146], [150, 144, 146, 142], [142, 138, 143, 146], [142, 143, 146, 151], [150, 146, 151, 142], [146, 144, 145, 152], [146, 145, 152, 153], [154, 152, 153, 146], [146, 145, 147, 153], [146, 147, 153, 155], [154, 153, 155, 146], [148, 147, 145, 155], [148, 145, 155, 153], [156, 155, 153, 148], [148, 145, 149, 153], [148, 149, 153, 157], [156, 153, 157, 148], [149, 145, 144, 153], [149, 144, 153, 152], [157, 153, 152, 149], [149, 144, 150, 152], [149, 150, 152, 158], [157, 152, 158, 149], [150, 151, 148, 159], [150, 148, 159, 156], [158, 159, 156, 150], [150, 148, 149, 156], [150, 149, 156, 157], [158, 156, 157, 150], [151, 146, 147, 154], [151, 147, 154, 155], [159, 154, 155, 151], [151, 147, 148, 155], [151, 148, 155, 156], [159, 155, 156, 151], [150, 144, 146, 152], [150, 146, 152, 154], [158, 152, 154, 150], [150, 146, 151, 154], [150, 151, 154, 159], [158, 154, 159, 150]]
let lastTime = 0
function gameloop(timestamp) {
    var start = Date.now()
    ctx.clearRect(0,0,GAME_SIZE,GAME_SIZE);
    sliceDraw(borderpoints,faces,sliceoffset)
    if(!dead){
        while((Date.now()-start)<15){
        }
        requestAnimationFrame(gameloop)
    }
}
requestAnimationFrame(gameloop)